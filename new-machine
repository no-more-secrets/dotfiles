#!/bin/bash
# ---------------------------------------------------------------
# New Machine Setup Script.
# ---------------------------------------------------------------
# This script must be idempotent!
set -eEo pipefail

# ---------------------------------------------------------------
# Update system.
# ---------------------------------------------------------------
echo 'Updating system.'
sudo apt update
sudo apt upgrade --yes
sudo apt autoremove --yes

# ---------------------------------------------------------------
# Set locale.
# ---------------------------------------------------------------
echo "Setting locale (requires password)..."
sudo locale-gen en_US.UTF-8

# ---------------------------------------------------------------
# Create home folder structure.
# ---------------------------------------------------------------
mkdir -p ~/bin

# ---------------------------------------------------------------
# Acquire ssh keys and config.
# ---------------------------------------------------------------
mkdir -p ~/.ssh
chmod 700 ~/.ssh

hostname='leopard'
server=192.168.1.111

echo "Attempting to contact $server (may be known as $hostname)"
echo "for SSH keys.  Pinging..."
ping -c1 -q $server

echo "Host $hostname is responding; you will now be asked for"
echo "$server's ssh password twice."

[[ ! -f ~/.ssh/id_rsa     ]] && scp dsicilia@$server:/home/dsicilia/.ssh/id_rsa ~/.ssh
[[ ! -f ~/.ssh/id_rsa.pub ]] && scp dsicilia@$server:/home/dsicilia/.ssh/id_rsa.pub ~/.ssh
[[ ! -f ~/.ssh/config ]] && scp dsicilia@$server:/home/dsicilia/.ssh/config ~/.ssh

server=linode

# ---------------------------------------------------------------
# Install git.
# ---------------------------------------------------------------
echo "Installing git; you may be asked for your account password."
sudo apt install git --yes

# ---------------------------------------------------------------
# Clone dotfiles.
# ---------------------------------------------------------------
clone_impl() {
  local org="$1"
  local repo="$2"
  local where="$3"
  [[ -z "$where" ]] && where="$repo"
  [[ -d "$where" ]] && return 0
  git clone ssh://git@github.com/$org/$repo $where --recursive
}

clone()    { clone_impl dpacbach       "$@"; }
clone_rn() { clone_impl revolution-now "$@"; }

echo "Cloning dotfiles repo; should be passwordless."
cd ~
clone dotfiles .dotfiles

cd ~/.dotfiles
git pull origin master
git submodule update --init

# ---------------------------------------------------------------
# Create dev folder and contents.
# ---------------------------------------------------------------
echo "Cloning repos in ~/dev; should be passwordless."
mkdir -p ~/dev
cd ~/dev

clone    calcterm
clone    cpp
clone    base-util base/util
clone_rn revolution-now revolution-now
clone_rn revolution-now rn-art
clone_rn revolution-now rn-music
clone    Haskell-Utils haskell
clone    utilities
clone    suckless

# ---------------------------------------------------------------
# Source bashlib
# ---------------------------------------------------------------
source ~/dev/utilities/bashlib/util.sh

# ---------------------------------------------------------------
# VNC
# ---------------------------------------------------------------
mkdir -p ~/.vnc
[[ ! -f ~/.vnc/passwd ]] && scp dsicilia@$server:/home/dsicilia/.vnc/passwd ~/.vnc/

# ---------------------------------------------------------------
# Setup cmc
# ---------------------------------------------------------------
[[ ! -e ~/bin/cmc ]] && ln -s ~/dev/utilities/cmake/configure ~/bin/cmc

# ---------------------------------------------------------------
# ccache
# ---------------------------------------------------------------
log "Setting ccache size to 100G..."
mkdir -p ~/.ccache
if [[ ! -e ~/.ccache/ccache.conf ]]; then
  echo 'max_size = 100.0G' > ~/.ccache/ccache.conf
fi

# ---------------------------------------------------------------
# Install Packages.
# ---------------------------------------------------------------
log "Installing packages."
cd ~/.dotfiles
scripts/install-packages.sh

# ---------------------------------------------------------------
# Suckless utils.
# ---------------------------------------------------------------
cd ~/dev/suckless
make
./dwm/install.sh

# ---------------------------------------------------------------
# Wallpapers
# ---------------------------------------------------------------
cd ~
mkdir -p Pictures
cd Pictures
clone wallpapers

feh --bg-max ~/Pictures/wallpapers/default

# ---------------------------------------------------------------
# Haskell
# ---------------------------------------------------------------
cd ~/.dotfiles
log "Building haskell utils..."
scripts/build-hs-utils.sh

# ---------------------------------------------------------------
# Make `light` work
# ---------------------------------------------------------------
# This allows running /usr/bin/light as root without password, which
# then allows using it to control screen brightness.
log "May need sudo password to give /usr/bin/light +s:"
sudo chmod +s /usr/bin/light

# ---------------------------------------------------------------
# Build vim
# ---------------------------------------------------------------
# We need to do this before running `make` in the dotfiles folder
# since that will update the plugins, and we want the latest vim
# version for that to work.
log "Building vim..."
~/dev/utilities/building/nvim.sh

# ---------------------------------------------------------------
# Run dotfiles.
# ---------------------------------------------------------------
rm -f ~/.bashrc

log "Running setup scripts."
cd ~/.dotfiles
# No REBUILD_YCM= here, since we don't have clang yet.
make

# ---------------------------------------------------------------
# Setup "recycling".
# ---------------------------------------------------------------
log "Creating recycle symlink."
[[ ! -L ~/bin/recycle ]] && ln -s ~/dev/utilities/misc/recycle ~/bin/recycle

# ---------------------------------------------------------------
# Pull in gruvbox config from server.
# ---------------------------------------------------------------
log "Updating gruvbox colorscheme local changes..."
gruvbox_vim="$HOME/.dotfiles/dot/vim/bundle/gruvbox/colors/gruvbox.vim"
scp dsicilia@$server:$gruvbox_vim $gruvbox_vim

echo
log 'Finished setup, press enter to begin building tools...'
read

# ---------------------------------------------------------------
# Run build scripts.
# ---------------------------------------------------------------
~/dev/utilities/building/new-machine.sh

# ---------------------------------------------------------------
# Rebuild YCM.
# ---------------------------------------------------------------
# Must do this after clang is built by the above script.
log "Rebuilding YCM."
cd ~/.dotfiles
./scripts/build-ycm.sh

# ---------------------------------------------------------------
# Finished.
# ---------------------------------------------------------------
log 'Finished.'
